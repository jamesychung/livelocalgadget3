{"version":3,"sources":["/var/gadget/codegen/framework-1751338482029-OoEVjq/src/models/Event.ts"],"sourcesContent":["// All the generated types for the \"event\" model preconditions, actions, params, etc\nimport { AmbientContext } from \"../AmbientContext.js\";\nimport { ActionExecutionScope, NotYetTyped, ValidationErrors, ActionTrigger, TriggerWithType } from \"../types.js\";\nimport type { Scalars } from \"@gadget-client/livelocalgadget6\";\nimport { GadgetRecord, Event } from \"@gadget-client/livelocalgadget6\";\nimport { Select } from \"@gadgetinc/api-client-core\";\n\nexport type DefaultEventServerSelection = {\n  readonly __typename: true;\n      readonly id: true;\n      readonly createdAt: true;\n      readonly updatedAt: true;\n      readonly availableTickets: true;\n      readonly category: true;\n      readonly createdById: true;\n    readonly createdBy: false;\n      readonly date: true;\n      readonly description: true;\n      readonly endTime: true;\n      readonly equipment: true;\n      readonly genres: true;\n      readonly image: true;\n      readonly isActive: true;\n      readonly isPublic: true;\n      readonly isRecurring: true;\n      readonly musicianId: true;\n    readonly musician: false;\n      readonly recurringDays: true;\n      readonly recurringEndDate: true;\n      readonly recurringInterval: true;\n      readonly recurringPattern: true;\n      readonly setlist: true;\n      readonly startTime: true;\n      readonly eventStatus: true;\n      readonly ticketPrice: true;\n      readonly ticketType: true;\n      readonly title: true;\n      readonly totalCapacity: true;\n      readonly venueId: true;\n    readonly venue: false;\n      readonly rate: true;\n  };\n\n  \n/** Context of the `create` action on the `event` model. */\nexport interface CreateEventActionContext extends AmbientContext {\n  /**\n  * The model this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * An object specifying the `event` record this action is operating on.\n  */\n  record: GadgetRecord<Select<Event, DefaultEventServerSelection>>;\n  /**\n  * @deprecated Use 'return' instead.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object specifying the trigger to this action (e.g. API call, webhook events etc.).\n  */\n  trigger: TriggerWithType<\"api\"> | TriggerWithType<\"background-action\">;\n  /**\n  * An object containing the incoming data(this models fields) passed by triggers or user inputs.\n  */\n  params: {\nevent?: { availableTickets?: number;category?: string;createdBy?: { _link: string | null };date?: Date;description?: string;endTime?: string;equipment?: Scalars[\"JSON\"];genres?: Scalars[\"JSON\"];image?: string;isActive?: boolean;isPublic?: boolean;isRecurring?: boolean;musician?: { _link: string | null };recurringDays?: Scalars[\"JSON\"];recurringEndDate?: Date;recurringInterval?: number;recurringPattern?: string;setlist?: Scalars[\"JSON\"];startTime?: string;eventStatus?: string;ticketPrice?: number;ticketType?: string;title?: string;totalCapacity?: number;venue?: { _link: string | null };rate?: number; };\n};\n  /**\n  * @private The context of this action.\n  */\n  context: CreateEventActionContext;\n};\n\n\n    \n/** Context of the `update` action on the `event` model. */\nexport interface UpdateEventActionContext extends AmbientContext {\n  /**\n  * The model this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * An object specifying the `event` record this action is operating on.\n  */\n  record: GadgetRecord<Select<Event, DefaultEventServerSelection>>;\n  /**\n  * @deprecated Use 'return' instead.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object specifying the trigger to this action (e.g. API call, webhook events etc.).\n  */\n  trigger: TriggerWithType<\"api\"> | TriggerWithType<\"background-action\">;\n  /**\n  * An object containing the incoming data(this models fields) passed by triggers or user inputs.\n  */\n  params: {\nevent?: { availableTickets?: number;category?: string;createdBy?: { _link: string | null };date?: Date;description?: string;endTime?: string;equipment?: Scalars[\"JSON\"];genres?: Scalars[\"JSON\"];image?: string;isActive?: boolean;isPublic?: boolean;isRecurring?: boolean;musician?: { _link: string | null };recurringDays?: Scalars[\"JSON\"];recurringEndDate?: Date;recurringInterval?: number;recurringPattern?: string;setlist?: Scalars[\"JSON\"];startTime?: string;eventStatus?: string;ticketPrice?: number;ticketType?: string;title?: string;totalCapacity?: number;venue?: { _link: string | null };rate?: number; };    \nid?: string;\n};\n  /**\n  * @private The context of this action.\n  */\n  context: UpdateEventActionContext;\n};\n\n\n    \n/** Context of the `findFirst` action on the `event` model. */\nexport interface FindFirstEventActionContext extends AmbientContext {\n  /**\n  * The model this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * An object specifying the `event` record this action is operating on.\n  */\n  record: GadgetRecord<Select<Event, DefaultEventServerSelection>>;\n  /**\n  * @deprecated Use 'return' instead.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object specifying the trigger to this action (e.g. API call, webhook events etc.).\n  */\n  trigger: TriggerWithType<\"api\"> | TriggerWithType<\"background-action\">;\n  /**\n  * An object containing the incoming data(this models fields) passed by triggers or user inputs.\n  */\n  params: {\nid?: string;\n};\n  /**\n  * @private The context of this action.\n  */\n  context: FindFirstEventActionContext;\n};\n\n\n  "],"names":[],"mappings":"AAAA,oFAAoF;AA4CpF,yDAAyD,GAEvD;;EAEA,GAEA;;EAEA,GAEA;;EAEA,GAEA;;EAEA,GAEA;;EAEA,GAIA;;EAEA,GAMF,yDAAyD,GAEvD;;EAEA,GAEA;;EAEA,GAEA;;EAEA,GAEA;;EAEA,GAEA;;EAEA,GAKA;;EAEA,GAMF,4DAA4D,GAC5D,WA2BC,CA1BC;;EAEA,IAEA;;EAEA,IAEA;;EAEA,IAEA;;EAEA,IAEA;;EAEA,IAIA;;EAEA"}