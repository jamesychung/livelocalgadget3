{"version":3,"sources":["/var/gadget/codegen/framework-1750396385883-9uj1EN/src/routes.ts"],"sourcesContent":["import { Livelocalgadget3Client } from \"@gadget-client/livelocalgadget3\";\nimport type {\n  FastifyInstance,\n  FastifyReply,\n  FastifyRequest,\n  RequestGenericInterface,\n  RouteGenericInterface,\n  ContextConfigDefault,\n  RawServerDefault,\n  RawRequestDefaultExpression,\n  RawReplyDefaultExpression,\n  RouteShorthandOptions,\n  RouteHandlerMethod,\n} from \"fastify\";\nimport { Logger } from \"./AmbientContext.js\";\nimport { AppConfiguration } from \"./AppConfiguration.js\";\nimport { AppConnections } from \"./AppConnections.js\";\nimport { Session } from \"./Session.js\";\nimport { GadgetConfig } from \"./types.js\"\n\n/**\n * Extend the fastify request type with our added decorations like `.api`, `.emails`, etc\n * See https://fastify.dev/docs/latest/Reference/TypeScript#creating-type-definitions-for-a-fastify-plugin\n **/\ndeclare module \"fastify\" {\n  interface FastifyRequest {\n    /** The current request's session, if it has one. Requests made by browsers are given sessions, but requests made using Gadget API Keys are not. */\n    session: Session | null;\n\n    /** The current request's session ID, if it has one. Requests made by browsers are given sessions, but requests made using Gadget API Keys are not. */\n    sessionID: string | null;\n\n    /** All livelocalgadget3 configuration values */\n    config: AppConfiguration;\n\n    /** A map of connection name to instantiated connection objects for livelocalgadget3 */\n    connections: AppConnections;\n\n    /** A high performance structured logger which writes logs to the Logs Viewer in the Gadget Editor. */\n    logger: Logger;\n\n    /** Gadget configuration values for the current request. Useful for Remix SSR apps for accessing the Shopify install state or passing the values to client side code. */\n    gadgetConfig: GadgetConfig;\n\n    /** An context object used by Gadget to store request information that it is responsible for managing. */\n    gadgetContext: Record<string, any>;\n\n    /**\n     * An instance of the API client for livelocalgadget3.\n     *\n     * __Note__: This client is authorized using a superuser internal api token and has permission to invoke any action in the system using normal API mutations or the Internal API.\n     **/\n    api: Livelocalgadget3Client;\n\n    /** App URL for the current environment e.g. https://example.gadget.app */\n    currentAppUrl: string;\n\n    /** Fastify request object */\n    request: this;\n\n    /** Fastify reply object */\n    reply: FastifyReply;\n\n    /** @deprecated Use session instead */\n    applicationSession?: Session;\n\n    /** @deprecated Use sessionID instead */\n    applicationSessionID?: string;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  interface FastifyReply {\n    // no reply extensions yet\n  }\n}\n\n/** A server instance, for hooking into various events, decorating requests, and so on.  */\nexport type Server = FastifyInstance;\n\n/**\n * A type representing the auto-loadable routes exported from the routes files.\n *\n * @example\n * ```ts\n * const route: RouteHandler<{ Body: { name: string } }> = async function ({ request, reply }) {\n *   const { name } = request.body;\n *\n *   await reply.send({ message: `Hello, ${name}!` });\n * }\n * route.options = {\n *   schema: {\n *     body: {\n *       type: 'object',\n *       properties: {\n *         name: { type: 'string' },\n *       },\n *     },\n *   },\n * }\n *\n * export default route;\n * ```\n *\n * See https://docs.gadget.dev/guides/http-routes\n */\nexport type RouteHandler<\n  RouteGeneric extends RouteGenericInterface = RouteGenericInterface,\n  ContextConfig = ContextConfigDefault\n> = RouteHandlerMethod<\n  RawServerDefault,\n  RawRequestDefaultExpression<RawServerDefault>,\n  RawReplyDefaultExpression<RawServerDefault>,\n  RouteGeneric,\n  ContextConfig\n> & {\n  options?: RouteShorthandOptions<\n    RawServerDefault,\n    RawRequestDefaultExpression<RawServerDefault>,\n    RawReplyDefaultExpression<RawServerDefault>,\n    RouteGeneric,\n    ContextConfig\n  >;\n}\n\n/** A request instance, to query data on an incoming HTTP request. */\nexport type RouteContext<InputTypes extends RequestGenericInterface = RequestGenericInterface> = FastifyRequest<InputTypes>\n\nexport type Request<InputTypes extends RequestGenericInterface = RequestGenericInterface> = FastifyRequest<InputTypes>;\n\n/** A reply instance, for sending headers and data in an HTTP response. */\nexport type Reply = FastifyReply;\n"],"names":[],"mappings":"AAoBA;;;EAGE,GAGE,iJAAiJ,GAGjJ,oJAAoJ,GAGpJ,8CAA8C,GAG9C,qFAAqF,GAGrF,oGAAoG,GAGpG,sKAAsK,GAGtK,uGAAuG,GAGvG;;;;MAIE,GAGF,wEAAwE,GAGxE,2BAA2B,GAG3B,yBAAyB,GAGzB,oCAAoC,GAGpC,sCAAsC,GAIxC,mEAAmE;AAEjE,0BAA0B;AAI9B,yFAAyF,GAGzF;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GAoBD,mEAAmE,GAKnE,wEAAwE,GACxE,WAAiC"}