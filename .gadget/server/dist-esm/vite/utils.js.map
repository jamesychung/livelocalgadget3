{"version":3,"sources":["/var/gadget/codegen/framework-1751338482029-OoEVjq/src/vite/utils.ts"],"sourcesContent":["import { BuildDirectory } from \"../remix/constants.js\";\nimport { FrontendType } from \"./helpers.js\";\n\nconst getDefaultProductionBaseUrl = (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string): string => {\n  return `https://${assetsBucketDomain}/a/${applicationId}/${productionEnvironmentId}`;\n};\n\n/** A descriptor object that describes how different Gadget frontend types work for our use when building vite configs */\ntype InternalFrontendConfig = {\n  distPath: string;\n  manifestFilePaths: string[];\n  productionBaseUrl: (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string) => string;\n};\n\nconst BaseRemixFrontendConfig: InternalFrontendConfig = Object.freeze({\n  distPath: `${BuildDirectory}/client`,\n  manifestFilePaths: [`${BuildDirectory}/.vite/client-manifest.json`],\n  productionBaseUrl: (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string) => {\n    return `${getDefaultProductionBaseUrl(assetsBucketDomain, applicationId, productionEnvironmentId)}/`;\n  },\n});\n\nconst BaseReactRouterFrontendConfig: InternalFrontendConfig = Object.freeze({\n  distPath: `${BuildDirectory}/client`,\n  manifestFilePaths: [`${BuildDirectory}/client/.vite/manifest.json`],\n  productionBaseUrl: (assetsBucketDomain: string, applicationId: string, productionEnvironmentId: string) => {\n    return `${getDefaultProductionBaseUrl(assetsBucketDomain, applicationId, productionEnvironmentId)}/`;\n  },\n});\n\nconst BaseViteFrontendConfig: InternalFrontendConfig = Object.freeze({\n  distPath: \".gadget/vite-dist\",\n  manifestFilePaths: [\".gadget/vite-dist/.vite/manifest.json\", \".gadget/vite-dist/manifest.json\"],\n  productionBaseUrl: getDefaultProductionBaseUrl,\n});\n\n/**\n * Get the frontend config for the given framework type.\n */\nexport const getInternalFrontendConfig = (frameworkType: FrontendType): InternalFrontendConfig => {\n  switch (frameworkType) {\n    case FrontendType.Remix:\n      return BaseRemixFrontendConfig;\n    case FrontendType.ReactRouterFramework:\n      return BaseReactRouterFrontendConfig;\n    case FrontendType.Vite:\n      return BaseViteFrontendConfig;\n\n    default:\n      throw new Error(`Unknown frontend type detected: ${frameworkType}`);\n  }\n};\n\n/**\n * Get the frontend type from the given indicator file content.\n */\nexport const getFrontendType = (indicatorFileContent: string): FrontendType => {\n  if (Object.values(FrontendType).includes(indicatorFileContent as any)) {\n    return indicatorFileContent as FrontendType;\n  }\n\n  throw new Error(`Unknown frontend type detected: ${indicatorFileContent}`);\n};\n"],"names":["BuildDirectory","FrontendType","getDefaultProductionBaseUrl","assetsBucketDomain","applicationId","productionEnvironmentId","BaseRemixFrontendConfig","Object","freeze","distPath","manifestFilePaths","productionBaseUrl","BaseReactRouterFrontendConfig","BaseViteFrontendConfig","getInternalFrontendConfig","frameworkType","Remix","ReactRouterFramework","Vite","Error","getFrontendType","indicatorFileContent","values","includes"],"mappings":"AAAA,SAASA,cAAc,QAAQ,wBAAwB;AACvD,SAASC,YAAY,QAAQ,eAAe;AAE5C,MAAMC,8BAA8B,CAACC,oBAA4BC,eAAuBC;IACtF,OAAO,CAAC,QAAQ,EAAEF,mBAAmB,GAAG,EAAEC,cAAc,CAAC,EAAEC,yBAAyB;AACtF;AAEA,uHAAuH,GAOvH,MAAMC,0BAAkDC,OAAOC,MAAM,CAAC;IACpEC,UAAU,GAAGT,eAAe,OAAO,CAAC;IACpCU,mBAAmB;QAAC,GAAGV,eAAe,2BAA2B,CAAC;KAAC;IACnEW,mBAAmB,CAACR,oBAA4BC,eAAuBC;QACrE,OAAO,GAAGH,4BAA4BC,oBAAoBC,eAAeC,yBAAyB,CAAC,CAAC;IACtG;AACF;AAEA,MAAMO,gCAAwDL,OAAOC,MAAM,CAAC;IAC1EC,UAAU,GAAGT,eAAe,OAAO,CAAC;IACpCU,mBAAmB;QAAC,GAAGV,eAAe,2BAA2B,CAAC;KAAC;IACnEW,mBAAmB,CAACR,oBAA4BC,eAAuBC;QACrE,OAAO,GAAGH,4BAA4BC,oBAAoBC,eAAeC,yBAAyB,CAAC,CAAC;IACtG;AACF;AAEA,MAAMQ,yBAAiDN,OAAOC,MAAM,CAAC;IACnEC,UAAU;IACVC,mBAAmB;QAAC;QAAyC;KAAkC;IAC/FC,mBAAmBT;AACrB;AAEA;;CAEC,GACD,OAAO,MAAMY,4BAA4B,CAACC;IACxC,OAAQA;QACN,KAAKd,aAAae,KAAK;YACrB,OAAOV;QACT,KAAKL,aAAagB,oBAAoB;YACpC,OAAOL;QACT,KAAKX,aAAaiB,IAAI;YACpB,OAAOL;QAET;YACE,MAAM,IAAIM,MAAM,CAAC,gCAAgC,EAAEJ,eAAe;IACtE;AACF,EAAE;AAEF;;CAEC,GACD,OAAO,MAAMK,kBAAkB,CAACC;IAC9B,IAAId,OAAOe,MAAM,CAACrB,cAAcsB,QAAQ,CAACF,uBAA8B;QACrE,OAAOA;IACT;IAEA,MAAM,IAAIF,MAAM,CAAC,gCAAgC,EAAEE,sBAAsB;AAC3E,EAAE"}