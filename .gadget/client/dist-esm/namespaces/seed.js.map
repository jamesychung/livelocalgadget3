{
  "version": 3,
  "sources": ["../../src/namespaces/seed.ts"],
  "sourcesContent": ["import { GadgetConnection } from \"@gadgetinc/api-client-core\";\nimport { buildGlobalAction } from \"./../builder.js\";\nimport { buildInlineComputedView } from \"./../builder.js\";\n\n/**\n * Function type for the inline view execution function.\n * Includes overloads for all known instances collected from call sites.\n **/\ntype InlineViewFunction = {\n  (query: string, variables?: Record<string, unknown>): Promise<unknown>\n}\n\n/** The seed namespace */\nexport class SeedNamespace {\n  /** Executes the createEvents global action. */\n  createEvents = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'createEvents',\n                       operationName: 'createEvents',\n                       operationReturnType: 'SeedCreateEvents',\n                       namespace: 'seed',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'createEvents';\n                     operationReturnType: 'SeedCreateEvents';\n                     namespace: 'seed';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the createMusicians global action. */\n  createMusicians = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'createMusicians',\n                       operationName: 'createMusicians',\n                       operationReturnType: 'SeedCreateMusicians',\n                       namespace: 'seed',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'createMusicians';\n                     operationReturnType: 'SeedCreateMusicians';\n                     namespace: 'seed';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the createReviews global action. */\n  createReviews = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'createReviews',\n                       operationName: 'createReviews',\n                       operationReturnType: 'SeedCreateReviews',\n                       namespace: 'seed',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'createReviews';\n                     operationReturnType: 'SeedCreateReviews';\n                     namespace: 'seed';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the createUsers global action. */\n  createUsers = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'createUsers',\n                       operationName: 'createUsers',\n                       operationReturnType: 'SeedCreateUsers',\n                       namespace: 'seed',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'createUsers';\n                     operationReturnType: 'SeedCreateUsers';\n                     namespace: 'seed';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the createVenues global action. */\n  createVenues = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'createVenues',\n                       operationName: 'createVenues',\n                       operationReturnType: 'SeedCreateVenues',\n                       namespace: 'seed',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'createVenues';\n                     operationReturnType: 'SeedCreateVenues';\n                     namespace: 'seed';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the quickSeed global action. */\n  quickSeed = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'quickSeed',\n                       operationName: 'quickSeed',\n                       operationReturnType: 'SeedQuickSeed',\n                       namespace: 'seed',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'quickSeed';\n                     operationReturnType: 'SeedQuickSeed';\n                     namespace: 'seed';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the seedAllData global action. */\n  seedAllData = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'seedAllData',\n                       operationName: 'seedAllData',\n                       operationReturnType: 'SeedSeedAllData',\n                       namespace: 'seed',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'seedAllData';\n                     operationReturnType: 'SeedSeedAllData';\n                     namespace: 'seed';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the seedData global action. */\n  seedData = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'seedData',\n                       operationName: 'seedData',\n                       operationReturnType: 'SeedSeedData',\n                       namespace: 'seed',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'seedData';\n                     operationReturnType: 'SeedSeedData';\n                     namespace: 'seed';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes the simpleSeed global action. */\n  simpleSeed = buildGlobalAction(this, {\n                       type: 'globalAction',\n                       functionName: 'simpleSeed',\n                       operationName: 'simpleSeed',\n                       operationReturnType: 'SeedSimpleSeed',\n                       namespace: 'seed',\n                       variables: {}\n                     } as const) as unknown as {\n                     (): Promise<any>;\n                     type: 'globalAction';\n                     operationName: 'simpleSeed';\n                     operationReturnType: 'SeedSimpleSeed';\n                     namespace: 'seed';\n                     typesImports: [];\n                     variables: {};\n                     variablesType: Record<string, never>;\n                   };\n  /** Executes an inline computed view. */\n  view: InlineViewFunction = buildInlineComputedView(this, {\n                             type: 'computedView',\n                             operationName: 'gellyView',\n                             functionName: 'view',\n                             gqlFieldName: 'gellyView',\n                             namespace: 'seed',\n                             variables: {\n                               query: { type: 'String', required: true },\n                               args: { type: 'JSONObject' }\n                             }\n                           } as const);\n\n  connection: GadgetConnection;\n  constructor(readonly clientOrParent: { connection: GadgetConnection }) {\n    this.connection = this.clientOrParent.connection as GadgetConnection;\n    \n  }\n}"],
  "mappings": "AACA,SAAS,yBAAyB;AAClC,SAAS,+BAA+B;AAWjC,MAAM,cAAc;AAAA,EAiLzB,YAAqB,gBAAkD;AAAlD;AA/KrB;AAAA,wBAAe,kBAAkB,MAAM;AAAA,MAClB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,2BAAkB,kBAAkB,MAAM;AAAA,MACrB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,yBAAgB,kBAAkB,MAAM;AAAA,MACnB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,uBAAc,kBAAkB,MAAM;AAAA,MACjB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,wBAAe,kBAAkB,MAAM;AAAA,MAClB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,qBAAY,kBAAkB,MAAM;AAAA,MACf,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,uBAAc,kBAAkB,MAAM;AAAA,MACjB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,oBAAW,kBAAkB,MAAM;AAAA,MACd,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,sBAAa,kBAAkB,MAAM;AAAA,MAChB,MAAM;AAAA,MACN,cAAc;AAAA,MACd,eAAe;AAAA,MACf,qBAAqB;AAAA,MACrB,WAAW;AAAA,MACX,WAAW,CAAC;AAAA,IACd,CAAU;AAW7B;AAAA,gBAA2B,wBAAwB,MAAM;AAAA,MAC9B,MAAM;AAAA,MACN,eAAe;AAAA,MACf,cAAc;AAAA,MACd,cAAc;AAAA,MACd,WAAW;AAAA,MACX,WAAW;AAAA,QACT,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,QACxC,MAAM,EAAE,MAAM,aAAa;AAAA,MAC7B;AAAA,IACF,CAAU;AAIjC,SAAK,aAAa,KAAK,eAAe;AAAA,EAExC;AACF;",
  "names": []
}
