{"version":3,"sources":["/var/gadget/codegen/framework-1750313340857-XpaeKO/src/auth/effects.ts"],"sourcesContent":["import type { GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { validateBelongsToLink } from \"../auth.js\";\nimport { FieldType, getActionContextFromLocalStorage } from \"../effects.js\";\nimport { modelsMap } from \"../metadata.js\";\nimport type { AnyParams } from \"../types.js\";\n\n/**\n * Applicable for multi-tenant user authenticated apps.\n * Enforces that the given record is only accessible by the current logged in user.\n *\n * For new records: sets the the current session's `userId` to the record.\n * For existing records: Verifies the record objects `userId` matches the one from the current session.\n *\n * @param params - incoming data validated against the current `userId`\n * @param record - record used to validate or set the `userId` on\n * @param {Object} options - Additional options for cross-user validation\n * @param {string} options.userBelongsToField - Specifies which related model is used for cross-user validation.\n */\nexport async function preventCrossUserDataAccess(\n  params: AnyParams,\n  record: GadgetRecord<any>,\n  options?: { userBelongsToField?: string }\n): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n\n  if (context.type != \"effect\") {\n    throw new Error(\"Can't prevent cross user data access outside of an action effect\");\n  }\n  if (!params) {\n    throw new Error(\n      \"The `params` parameter is required in preventCrossUserDataAccess(params, record, options?: { userBelongsToField: string })\"\n    );\n  }\n  if (!record) {\n    throw new Error(\n      \"The `record` parameter is required in preventCrossUserDataAccess(params, record, options?: { userBelongsToField: string })\"\n    );\n  }\n  const model = context.model;\n\n  const userBelongsToField = options?.userBelongsToField;\n\n  // if this effect is not run in the context of a model then it does not apply\n  if (!model) {\n    return;\n  }\n\n  const userId: string | undefined = context.session?.get(\"user\");\n  const input = params[model.apiIdentifier];\n\n  const userModel = context.authConfig?.userModelKey\n    ? Object.values(modelsMap).find((model) => model.key === context.authConfig?.userModelKey)\n    : undefined;\n\n  const tenantModelKey = userModel?.key ?? \"\";\n  const hasBelongsToField = Object.values(model.fields).some(\n    (f) => f.fieldType === (FieldType.BelongsTo as string) && f.configuration.relatedModelKey === tenantModelKey\n  );\n\n  if (userId && userModel && hasBelongsToField) {\n    validateBelongsToLink({\n      input,\n      record,\n      params,\n      tenantId: userId,\n      model,\n      tenantModelKey,\n      tenantBelongsToField: userBelongsToField,\n      tenantType: \"user\",\n    });\n  }\n}\n"],"names":["validateBelongsToLink","FieldType","getActionContextFromLocalStorage","modelsMap","preventCrossUserDataAccess","params","record","options","context","type","Error","model","userBelongsToField","userId","session","get","input","apiIdentifier","userModel","authConfig","userModelKey","Object","values","find","key","undefined","tenantModelKey","hasBelongsToField","fields","some","f","fieldType","BelongsTo","configuration","relatedModelKey","tenantId","tenantBelongsToField","tenantType"],"mappings":"AACA,SAASA,qBAAqB,QAAQ,aAAa;AACnD,SAASC,SAAS,EAAEC,gCAAgC,QAAQ,gBAAgB;AAC5E,SAASC,SAAS,QAAQ,iBAAiB;AAG3C;;;;;;;;;;;CAWC,GACD,OAAO,eAAeC,2BACpBC,MAAiB,EACjBC,MAAyB,EACzBC,OAAyC;IAEzC,MAAMC,UAAUN;IAEhB,IAAIM,QAAQC,IAAI,IAAI,UAAU;QAC5B,MAAM,IAAIC,MAAM;IAClB;IACA,IAAI,CAACL,QAAQ;QACX,MAAM,IAAIK,MACR;IAEJ;IACA,IAAI,CAACJ,QAAQ;QACX,MAAM,IAAII,MACR;IAEJ;IACA,MAAMC,QAAQH,QAAQG,KAAK;IAE3B,MAAMC,qBAAqBL,SAASK;IAEpC,6EAA6E;IAC7E,IAAI,CAACD,OAAO;QACV;IACF;IAEA,MAAME,SAA6BL,QAAQM,OAAO,EAAEC,IAAI;IACxD,MAAMC,QAAQX,MAAM,CAACM,MAAMM,aAAa,CAAC;IAEzC,MAAMC,YAAYV,QAAQW,UAAU,EAAEC,eAClCC,OAAOC,MAAM,CAACnB,WAAWoB,IAAI,CAAC,CAACZ,QAAUA,MAAMa,GAAG,KAAKhB,QAAQW,UAAU,EAAEC,gBAC3EK;IAEJ,MAAMC,iBAAiBR,WAAWM,OAAO;IACzC,MAAMG,oBAAoBN,OAAOC,MAAM,CAACX,MAAMiB,MAAM,EAAEC,IAAI,CACxD,CAACC,IAAMA,EAAEC,SAAS,KAAM9B,UAAU+B,SAAS,IAAeF,EAAEG,aAAa,CAACC,eAAe,KAAKR;IAGhG,IAAIb,UAAUK,aAAaS,mBAAmB;QAC5C3B,sBAAsB;YACpBgB;YACAV;YACAD;YACA8B,UAAUtB;YACVF;YACAe;YACAU,sBAAsBxB;YACtByB,YAAY;QACd;IACF;AACF"}